/*
  Copyright 2022 Adobe. All rights reserved.
  This file is licensed to you under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License. You may obtain a copy
  of the License at http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software distributed under
  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
  OF ANY KIND, either express or implied. See the License for the specific language
  governing permissions and limitations under the License.
*/
apply plugin: 'com.android.library'
apply plugin: "jacoco"
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'kotlin-android'

ext {
    srcFolders = file("./").listFiles().findAll {
        !it.isFile() && !it.name.startsWith("gradle") && !it.name.startsWith("test")
    }.collect { "./" + it.name + "/src/main/java" }
}

jacoco {
    toolVersion = rootProject.ext.jacocoVersion
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion


    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionName rootProject.moduleVersion

        testInstrumentationRunner rootProject.ext.testInstrumentationRunner
        consumerProguardFiles 'consumer-rules.pro'
        buildConfigField("String","LIB_VERSION","\"${rootProject.moduleVersion}\"")
    }

    flavorDimensions "target"
    productFlavors {
        phone {
            dimension "target"
        }
    }

    buildTypes {
        debug {
            testCoverageEnabled true
            debuggable true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    compileOptions {
        sourceCompatibility rootProject.ext.sourceCompatibility
        targetCompatibility rootProject.ext.targetCompatibility
    }

    kotlinOptions {
        jvmTarget = rootProject.ext.targetCompatibility
        languageVersion = "1.4"
        apiVersion = "1.4"
    }

    libraryVariants.all { variant ->
        variant.getRuntimeConfiguration().exclude group: 'com.adobe.marketing.mobile', module: 'core'
    }

    sourceSets {
        final def resourceDir = 'src/test/resources'

        test {
            resources.srcDirs += [resourceDir]
        }

        androidTest {
            resources.srcDirs += [resourceDir]
        }
    }
}

android.libraryVariants.all { variant ->
    tasks.withType(Javadoc) {
        ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"

        doFirst {
            classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
        }
        exclude "**/BuildConfig.java"
        exclude "**/R.java"
        options {
            links "https://developer.android.com/reference"
        }
    }
}

task javadocInternal(type: Javadoc) {
    destinationDir = reporting.file("javadocInternal")
    options.memberLevel = JavadocMemberLevel.PRIVATE
}

task javadocPublic(type: Javadoc) {
    destinationDir = reporting.file("javadocPublic")
    options.memberLevel = JavadocMemberLevel.PUBLIC
}

task javadocPublish(type: Jar) {
    from javadocPublic
    archiveClassifier.set('javadoc')
}

def isReleaseBuild() {
    return hasProperty('release')
}

version = isReleaseBuild() ? moduleVersion : moduleVersion + "-SNAPSHOT"

publishing {
    publications {
        release(MavenPublication) {
            groupId = 'com.adobe.marketing.mobile'
            artifactId = rootProject.moduleName
            version = version
            artifact("$buildDir/outputs/aar/${rootProject.moduleAARName}")
            artifact javadocPublish

            pom {
                name = mavenRepoName
                description = mavenRepoDescription
                url = 'https://developer.adobe.com/client-sdks/documentation/'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution = 'repo'
                    }
                }
                developers {
                    developer {
                        id = 'adobe'
                        name = 'adobe'
                        email = 'adobe-mobile-testing@adobe.com'
                    }
                }
                scm {
                    connection = 'scm:git:github.com//adobe/aepsdk-campaign-android.git'
                    developerConnection = 'scm:git:ssh://github.com//adobe/aepsdk-campaign-android.git'
                    url = 'https://github.com/adobe/aepsdk-campaign-android'
                }
                withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')

                    def coreDependencyNode = dependenciesNode.appendNode('dependency')
                    coreDependencyNode.appendNode('groupId', 'com.adobe.marketing.mobile')
                    coreDependencyNode.appendNode('artifactId', 'core')
                    coreDependencyNode.appendNode('version', mavenCoreVersion)

                    def identityDependencyNode = dependenciesNode.appendNode('dependency')
                    identityDependencyNode.appendNode('groupId', 'com.adobe.marketing.mobile')
                    identityDependencyNode.appendNode('artifactId', 'identity')
                    identityDependencyNode.appendNode('version', mavenIdentityVersion)
                }
            }
        }
    }
    repositories {
        maven {
            name = "sonatype"
            url = version.endsWith('SNAPSHOT') ? "https://oss.sonatype.org/content/repositories/snapshots/" : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = System.getenv("SONATYPE_USERNAME")
                password = System.getenv("SONATYPE_PASSWORD")
            }
        }
    }
}

ext."signing.gnupg.executable" = "gpg"
ext."signing.gnupg.keyName" = System.getenv("GPG_KEY_ID")
ext."signing.gnupg.passphrase" = System.getenv("GPG_PASSPHRASE")

signing {
    useGpgCmd()
    required {
        tasks.withType(PublishToMavenRepository).find {
            gradle.taskGraph.hasTask it
        }
    }
    sign publishing.publications
}

task platformUnitTestJacocoReport(type: JacocoReport, dependsOn: "testPhoneDebugUnitTest") {
    def excludeRegex = ['**/ADB*.class', '**/BuildConfig.class']
    def debugTree = fileTree(dir: "${project.buildDir}/intermediates/javac/phoneDebug/classes/com/adobe/marketing/mobile", excludes: excludeRegex)

    additionalClassDirs.setFrom files([debugTree])
    additionalSourceDirs.setFrom files(android.sourceSets.main.java.sourceFiles)
    sourceDirectories.setFrom files(android.sourceSets.phone.java.sourceFiles)
    executionData.setFrom fileTree(dir: "$buildDir", includes: [
            "outputs/unit_test_code_coverage/phoneDebugUnitTest/testPhoneDebugUnitTest.exec",
    ])
    
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled true
    }
}

task platformFunctionalTestJacocoReport(type: JacocoReport, dependsOn: "createPhoneDebugCoverageReport") {
    def excludeRegex = ['**/ADB*.class']
    def debugTree = fileTree(dir: "${project.buildDir}/intermediates/javac/phoneDebug/classes/com/adobe/marketing/mobile", excludes: excludeRegex)

    additionalClassDirs.setFrom files([debugTree])
    additionalSourceDirs.setFrom files(android.sourceSets.main.java.sourceFiles)
    sourceDirectories.setFrom files(android.sourceSets.phone.java.sourceFiles)
    executionData fileTree(dir: "$buildDir", includes: [
            "outputs/code_coverage/phoneDebugAndroidTest/connected/*coverage.ec"
    ])

    reports {
        xml.enabled true
        csv.enabled false
        html.enabled true
    }
}

apply from: 'checkstyle.gradle'

dependencies {
    // adobe sdk dependencies
    implementation "com.adobe.marketing.mobile:core:$rootProject.mavenCoreVersion"
    testImplementation "com.adobe.marketing.mobile:core:$rootProject.mavenCoreVersion"

    // functional test dependencies
    androidTestImplementation "com.adobe.marketing.mobile:core:$rootProject.mavenCoreVersion"
    androidTestImplementation "com.adobe.marketing.mobile:lifecycle:$rootProject.mavenLifecycleVersion"
    androidTestImplementation "com.adobe.marketing.mobile:identity:$rootProject.mavenIdentityVersion"
    androidTestImplementation "com.adobe.marketing.mobile:signal:$rootProject.mavenSignalVersion"
    androidTestImplementation "com.adobe.marketing.mobile:userprofile:$rootProject.mavenUserProfileVersion"


    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    // Firebase sdk compile only
    compileOnly "com.google.firebase:firebase-messaging:23.1.1"

    // Firebase sdk test implementation
    testImplementation 'com.google.firebase:firebase-messaging:23.1.1'
    testImplementation "androidx.test.ext:junit:${rootProject.ext.junitVersion}"
    testImplementation "org.mockito:mockito-core:${rootProject.ext.mockitoCoreVersion}"
    testImplementation "org.mockito:mockito-inline:${rootProject.ext.mockitoCoreVersion}"
    testImplementation 'org.json:json:20180813'

    androidTestImplementation "androidx.test.ext:junit:${junitVersion}"
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.0'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.4.2'
}

tasks.withType(Test) {
    testLogging {
        showStandardStreams = true
    }
}